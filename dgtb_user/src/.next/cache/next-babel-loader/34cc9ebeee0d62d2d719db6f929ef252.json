{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\nvar sagaMiddleWare = createSagaMiddleware();\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require(\"redux-devtools-extension\"),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nvar makeConfiguredStore = function makeConfiguredStore(reducer, initialState) {\n  return createStore(reducer, initialState, bindMiddleware([sagaMiddleWare]));\n};\n\nvar getStore = null;\nexport var makeStore = function makeStore(initialState, _ref) {\n  var isServer = _ref.isServer,\n      req = _ref.req,\n      debug = _ref.debug,\n      storeKey = _ref.storeKey;\n\n  if (isServer) {\n    console.log(\"object\");\n    initialState = initialState || {\n      fromServer: \"foo\"\n    };\n    return makeConfiguredStore(rootReducer, initialState);\n  } else {\n    var store = makeConfiguredStore(rootReducer, initialState);\n\n    store.runSagaTask = function () {\n      store.sagaTask = sagaMiddleWare.run(rootSaga);\n    };\n\n    store.runSagaTask();\n    getStore = store;\n    return store;\n  }\n};\nexport { getStore };","map":{"version":3,"sources":["C:/Users/vuhon/Desktop/dgtb_user/src/redux/store.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleWare","bindMiddleware","middleware","require","composeWithDevTools","makeConfiguredStore","reducer","initialState","getStore","makeStore","isServer","req","debug","storeKey","console","log","fromServer","store","runSagaTask","sagaTask","run"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP;AAEA,IAAMC,cAAc,GAAGH,oBAAoB,EAA3C;;AAEA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAgB;AACtC,YAA2C;AAAA,mBACVC,OAAO,CAAC,0BAAD,CADG;AAAA,QAClCC,mBADkC,YAClCA,mBADkC;;AAE1C,WAAOA,mBAAmB,CAACT,eAAe,MAAf,4BAAmBO,UAAnB,EAAD,CAA1B;AACA;;AAED,SAAOP,eAAe,MAAf,4BAAmBO,UAAnB,EAAP;AACA,CAPD;;AASA,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,YAAV,EAA2B;AACtD,SAAOX,WAAW,CAACU,OAAD,EAAUC,YAAV,EAAwBN,cAAc,CAAC,CAACD,cAAD,CAAD,CAAtC,CAAlB;AACA,CAFD;;AAIA,IAAIQ,QAAQ,GAAG,IAAf;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,YAAD,QAAsD;AAAA,MAArCG,QAAqC,QAArCA,QAAqC;AAAA,MAA3BC,GAA2B,QAA3BA,GAA2B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC9E,MAAIH,QAAJ,EAAc;AACbI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAR,IAAAA,YAAY,GAAGA,YAAY,IAAI;AAAES,MAAAA,UAAU,EAAE;AAAd,KAA/B;AACA,WAAOX,mBAAmB,CAACP,WAAD,EAAcS,YAAd,CAA1B;AACA,GAJD,MAIO;AACN,QAAMU,KAAK,GAAGZ,mBAAmB,CAACP,WAAD,EAAcS,YAAd,CAAjC;;AACAU,IAAAA,KAAK,CAACC,WAAN,GAAoB,YAAM;AACzBD,MAAAA,KAAK,CAACE,QAAN,GAAiBnB,cAAc,CAACoB,GAAf,CAAmBrB,QAAnB,CAAjB;AACA,KAFD;;AAGAkB,IAAAA,KAAK,CAACC,WAAN;AACAV,IAAAA,QAAQ,GAAGS,KAAX;AACA,WAAOA,KAAP;AACA;AACD,CAdM;AAgBP,SAAST,QAAT","sourcesContent":["import { applyMiddleware, createStore } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./reducers\";\r\nimport rootSaga from \"./sagas\";\r\n\r\nconst sagaMiddleWare = createSagaMiddleware();\r\n\r\nconst bindMiddleware = (middleware) => {\r\n\tif (process.env.NODE_ENV !== \"production\") {\r\n\t\tconst { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n\t\treturn composeWithDevTools(applyMiddleware(...middleware));\r\n\t}\r\n\r\n\treturn applyMiddleware(...middleware);\r\n};\r\n\r\nconst makeConfiguredStore = (reducer, initialState) => {\r\n\treturn createStore(reducer, initialState, bindMiddleware([sagaMiddleWare]));\r\n};\r\n\r\nlet getStore = null;\r\n\r\nexport const makeStore = (initialState, { isServer, req, debug, storeKey }) => {\r\n\tif (isServer) {\r\n\t\tconsole.log(\"object\");\r\n\t\tinitialState = initialState || { fromServer: \"foo\" };\r\n\t\treturn makeConfiguredStore(rootReducer, initialState);\r\n\t} else {\r\n\t\tconst store = makeConfiguredStore(rootReducer, initialState);\r\n\t\tstore.runSagaTask = () => {\r\n\t\t\tstore.sagaTask = sagaMiddleWare.run(rootSaga);\r\n\t\t};\r\n\t\tstore.runSagaTask();\r\n\t\tgetStore = store;\r\n\t\treturn store;\r\n\t}\r\n};\r\n\r\nexport { getStore };\r\n"]},"metadata":{},"sourceType":"module"}