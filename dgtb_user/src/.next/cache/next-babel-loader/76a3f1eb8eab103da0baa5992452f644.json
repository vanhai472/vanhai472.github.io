{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { call, put, race, take } from \"redux-saga/effects\";\nimport { delay } from \"redux-saga\";\nimport { markRequestPending, markRequestSuccess, markRequestFailure, markRequestCancelled, invokeCallback } from \"../actions/common\";\nimport { API_TIMEOUT } from \"../constants/api\";\nimport { setAuthState, removeLoggedUser } from \"../actions/auth\";\nexport var rejectErrors = function rejectErrors(res) {\n  var data = res.data.data;\n\n  if (!data) {\n    return Promise.reject({\n      message: res.data.message\n    });\n  }\n};\nexport var createRequestSaga = function createRequestSaga(_ref) {\n  var request = _ref.request,\n      key = _ref.key,\n      success = _ref.success,\n      failure = _ref.failure,\n      functionSuccess = _ref.functionSuccess,\n      functionFailure = _ref.functionFailure,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? API_TIMEOUT : _ref$timeout,\n      cancel = _ref.cancel,\n      cancelled = _ref.cancelled;\n  return /*#__PURE__*/_regeneratorRuntime.mark(function _callee(action) {\n    var args, callback, ret, err, requestKey, invokeRequest, raceOptions, _yield$race, data, isTimeout, cancelRet, _iterator, _step, actionCreator, _iterator2, _step2, _actionCreator, _iterator3, _step3, _actionCreator2, _iterator4, _step4, _actionCreator3, _iterator5, _step5, _actionCreator4;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            args = action.args || [];\n            console.log(args); // Kiểm tra xem có callback function ở action hay không\n\n            callback = typeof args[args.length - 1] === \"function\" ? args[args.length - 1] : null;\n\n            if (callback) {\n              args = args.slice(0, -1);\n            }\n\n            ret = null;\n            err = null; // Kiểm tra xem request có phải là function hay không\n\n            requestKey = typeof key === \"function\" ? key.apply(void 0, _toConsumableArray(args)) : key; // put vào action pending để chờ dữ liệu\n\n            _context2.next = 9;\n            return put(markRequestPending(requestKey));\n\n          case 9:\n            _context2.prev = 9;\n\n            if (request) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw new Error(\"Không tìm thấy API\");\n\n          case 12:\n            // yield call nhận vào 2 tham số, tham số thứ 2 là 1 mảng dữ liệu\n            invokeRequest = function invokeRequest() {\n              var chainRequest, response;\n              return _regeneratorRuntime.async(function invokeRequest$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      chainRequest = request.apply(request, args);\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(chainRequest);\n\n                    case 3:\n                      response = _context.sent;\n                      console.log(response);\n\n                      if (!(response.data.code >= 200 && response.data.code < 300)) {\n                        _context.next = 9;\n                        break;\n                      }\n\n                      return _context.abrupt(\"return\", response.data);\n\n                    case 9:\n                      return _context.abrupt(\"return\", rejectErrors(response));\n\n                    case 10:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            };\n\n            raceOptions = {\n              data: call(invokeRequest),\n              isTimeout: delay(timeout)\n            };\n\n            if (cancel) {\n              raceOptions.cancelRet = take(cancel);\n            }\n\n            _context2.next = 17;\n            return race(raceOptions);\n\n          case 17:\n            _yield$race = _context2.sent;\n            data = _yield$race.data;\n            isTimeout = _yield$race.isTimeout;\n            cancelRet = _yield$race.cancelRet;\n            console.log(data);\n\n            if (!isTimeout) {\n              _context2.next = 26;\n              break;\n            }\n\n            throw new Error(\"Api method is timeout after \".concat(timeout, \" ms!!!\"));\n\n          case 26:\n            if (!cancelRet) {\n              _context2.next = 49;\n              break;\n            }\n\n            if (!cancelled) {\n              _context2.next = 45;\n              break;\n            }\n\n            _iterator = _createForOfIteratorHelper(cancelled);\n            _context2.prev = 29;\n\n            _iterator.s();\n\n          case 31:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 37;\n              break;\n            }\n\n            actionCreator = _step.value;\n            _context2.next = 35;\n            return put(actionCreator(cancelRet, action));\n\n          case 35:\n            _context2.next = 31;\n            break;\n\n          case 37:\n            _context2.next = 42;\n            break;\n\n          case 39:\n            _context2.prev = 39;\n            _context2.t0 = _context2[\"catch\"](29);\n\n            _iterator.e(_context2.t0);\n\n          case 42:\n            _context2.prev = 42;\n\n            _iterator.f();\n\n            return _context2.finish(42);\n\n          case 45:\n            _context2.next = 47;\n            return put(markRequestCancelled(cancelRet, requestKey));\n\n          case 47:\n            _context2.next = 71;\n            break;\n\n          case 49:\n            if (!success) {\n              _context2.next = 67;\n              break;\n            }\n\n            _iterator2 = _createForOfIteratorHelper(success);\n            _context2.prev = 51;\n\n            _iterator2.s();\n\n          case 53:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 59;\n              break;\n            }\n\n            _actionCreator = _step2.value;\n            _context2.next = 57;\n            return put(_actionCreator(data, action));\n\n          case 57:\n            _context2.next = 53;\n            break;\n\n          case 59:\n            _context2.next = 64;\n            break;\n\n          case 61:\n            _context2.prev = 61;\n            _context2.t1 = _context2[\"catch\"](51);\n\n            _iterator2.e(_context2.t1);\n\n          case 64:\n            _context2.prev = 64;\n\n            _iterator2.f();\n\n            return _context2.finish(64);\n\n          case 67:\n            if (functionSuccess) {\n              _iterator3 = _createForOfIteratorHelper(functionSuccess);\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  _actionCreator2 = _step3.value;\n\n                  _actionCreator2(data);\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n\n            _context2.next = 70;\n            return put(markRequestSuccess(requestKey));\n\n          case 70:\n            ret = data;\n\n          case 71:\n            _context2.next = 102;\n            break;\n\n          case 73:\n            _context2.prev = 73;\n            _context2.t2 = _context2[\"catch\"](9);\n\n            if (!(_context2.t2.code === 401)) {\n              _context2.next = 80;\n              break;\n            }\n\n            _context2.next = 78;\n            return put(removeLoggedUser());\n\n          case 78:\n            _context2.next = 80;\n            return put(setAuthState(false));\n\n          case 80:\n            if (!failure) {\n              _context2.next = 98;\n              break;\n            }\n\n            _iterator4 = _createForOfIteratorHelper(failure);\n            _context2.prev = 82;\n\n            _iterator4.s();\n\n          case 84:\n            if ((_step4 = _iterator4.n()).done) {\n              _context2.next = 90;\n              break;\n            }\n\n            _actionCreator3 = _step4.value;\n            _context2.next = 88;\n            return put(_actionCreator3(_context2.t2, action));\n\n          case 88:\n            _context2.next = 84;\n            break;\n\n          case 90:\n            _context2.next = 95;\n            break;\n\n          case 92:\n            _context2.prev = 92;\n            _context2.t3 = _context2[\"catch\"](82);\n\n            _iterator4.e(_context2.t3);\n\n          case 95:\n            _context2.prev = 95;\n\n            _iterator4.f();\n\n            return _context2.finish(95);\n\n          case 98:\n            if (functionFailure) {\n              _iterator5 = _createForOfIteratorHelper(functionFailure);\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  _actionCreator4 = _step5.value;\n\n                  _actionCreator4(_context2.t2);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n\n            _context2.next = 101;\n            return put(markRequestFailure(requestKey, _context2.t2));\n\n          case 101:\n            err = _context2.t2;\n\n          case 102:\n            _context2.prev = 102;\n\n            if (!callback) {\n              _context2.next = 106;\n              break;\n            }\n\n            _context2.next = 106;\n            return put(invokeCallback(callback, err, ret));\n\n          case 106:\n            return _context2.finish(102);\n\n          case 107:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee, null, [[9, 73, 102, 107], [29, 39, 42, 45], [51, 61, 64, 67], [82, 92, 95, 98]]);\n  });\n};","map":{"version":3,"sources":["C:/Users/vuhon/Desktop/dgtb_user/src/redux/sagas/common.js"],"names":["call","put","race","take","delay","markRequestPending","markRequestSuccess","markRequestFailure","markRequestCancelled","invokeCallback","API_TIMEOUT","setAuthState","removeLoggedUser","rejectErrors","res","data","Promise","reject","message","createRequestSaga","request","key","success","failure","functionSuccess","functionFailure","timeout","cancel","cancelled","action","args","console","log","callback","length","slice","ret","err","requestKey","Error","invokeRequest","chainRequest","apply","response","code","raceOptions","isTimeout","cancelRet","actionCreator"],"mappings":"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","sourcesContent":["import { call, put, race, take } from \"redux-saga/effects\";\r\nimport { delay } from \"redux-saga\";\r\nimport {\r\n\tmarkRequestPending,\r\n\tmarkRequestSuccess,\r\n\tmarkRequestFailure,\r\n\tmarkRequestCancelled,\r\n\tinvokeCallback,\r\n} from \"../actions/common\";\r\nimport { API_TIMEOUT } from \"../constants/api\";\r\nimport { setAuthState, removeLoggedUser } from \"../actions/auth\";\r\nexport const rejectErrors = (res) => {\r\n\tconst { data } = res.data;\r\n\tif (!data) {\r\n\t\treturn Promise.reject({\r\n\t\t\tmessage: res.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const createRequestSaga = ({\r\n\trequest,\r\n\tkey,\r\n\tsuccess,\r\n\tfailure,\r\n\tfunctionSuccess,\r\n\tfunctionFailure,\r\n\ttimeout = API_TIMEOUT,\r\n\tcancel,\r\n\tcancelled,\r\n}) =>\r\n\tfunction* (action) {\r\n\t\tlet args = action.args || [];\r\n\t\tconsole.log(args);\r\n\t\t// Kiểm tra xem có callback function ở action hay không\r\n\t\tconst callback =\r\n\t\t\ttypeof args[args.length - 1] === \"function\"\r\n\t\t\t\t? args[args.length - 1]\r\n\t\t\t\t: null;\r\n\t\tif (callback) {\r\n\t\t\targs = args.slice(0, -1);\r\n\t\t}\r\n\t\tlet ret = null;\r\n\t\tlet err = null;\r\n\t\t// Kiểm tra xem request có phải là function hay không\r\n\t\tconst requestKey = typeof key === \"function\" ? key(...args) : key;\r\n\t\t// put vào action pending để chờ dữ liệu\r\n\t\tyield put(markRequestPending(requestKey));\r\n\t\t// bắt đầu gọi dữ liệu tử server về\r\n\t\ttry {\r\n\t\t\tif (!request) {\r\n\t\t\t\tthrow new Error(\"Không tìm thấy API\");\r\n\t\t\t}\r\n\t\t\t// yield call nhận vào 2 tham số, tham số thứ 2 là 1 mảng dữ liệu\r\n\t\t\tconst invokeRequest = async () => {\r\n\t\t\t\tconst chainRequest = request.apply(request, args);\r\n\t\t\t\tconst response = await chainRequest;\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tif (response.data.code >= 200 && response.data.code < 300)\r\n\t\t\t\t\treturn response.data;\r\n\t\t\t\telse return rejectErrors(response);\r\n\t\t\t};\r\n\t\t\tconst raceOptions = {\r\n\t\t\t\tdata: call(invokeRequest),\r\n\t\t\t\tisTimeout: delay(timeout),\r\n\t\t\t};\r\n\t\t\tif (cancel) {\r\n\t\t\t\traceOptions.cancelRet = take(cancel);\r\n\t\t\t}\r\n\t\t\tconst { data, isTimeout, cancelRet } = yield race(raceOptions);\r\n\t\t\tconsole.log(data);\r\n\t\t\tif (isTimeout) {\r\n\t\t\t\tthrow new Error(`Api method is timeout after ${timeout} ms!!!`);\r\n\t\t\t} else if (cancelRet) {\r\n\t\t\t\t// callback on success\r\n\t\t\t\tif (cancelled) {\r\n\t\t\t\t\tfor (const actionCreator of cancelled) {\r\n\t\t\t\t\t\tyield put(actionCreator(cancelRet, action));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// mark cancelled request\r\n\t\t\t\tyield put(markRequestCancelled(cancelRet, requestKey));\r\n\t\t\t} else {\r\n\t\t\t\tif (success) {\r\n\t\t\t\t\tfor (const actionCreator of success) {\r\n\t\t\t\t\t\tyield put(actionCreator(data, action));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (functionSuccess) {\r\n\t\t\t\t\tfor (const actionCreator of functionSuccess) {\r\n\t\t\t\t\t\tactionCreator(data);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tyield put(markRequestSuccess(requestKey));\r\n\t\t\t\tret = data;\r\n\t\t\t}\r\n\t\t} catch (reason) {\r\n\t\t\tif (reason.code === 401) {\r\n\t\t\t\tyield put(removeLoggedUser());\r\n\t\t\t\tyield put(setAuthState(false));\r\n\t\t\t}\r\n\t\t\tif (failure) {\r\n\t\t\t\tfor (const actionCreator of failure) {\r\n\t\t\t\t\tyield put(actionCreator(reason, action));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (functionFailure) {\r\n\t\t\t\tfor (const actionCreator of functionFailure) {\r\n\t\t\t\t\tactionCreator(reason);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tyield put(markRequestFailure(requestKey, reason));\r\n\t\t\terr = reason;\r\n\t\t} finally {\r\n\t\t\tif (callback) {\r\n\t\t\t\t// gọi lại callback và chuyển vào action invokeCallback trong action này hàm\r\n\t\t\t\t// callback được gọi và thực thi\r\n\t\t\t\t// ret chứa dữ liệu nếu gọi API thành công và truyền ngược lại cho\r\n\t\t\t\t// hàm gọi action đó\r\n\t\t\t\tyield put(invokeCallback(callback, err, ret));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n"]},"metadata":{},"sourceType":"module"}